This code goes outlines the time series anaylsis of Bitcoin prices from 2015 -2024. 

#Start with the basic necessities
import random
import os
import numpy as np
import pandas as pd
import requests
import pandas_datareader as web
import datetime as dt
from datetime import date, timedelta, datetime
import matplotlib.pyplot as plt
from matplotlib.pylab import rcParams
import plotly.express as px
import plotly.graph_objects as go
from plotly.offline import init_notebook_mode
init_notebook_mode(connected=True)
import matplotlib.colors
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from plotly.offline import init_notebook_mode




#Import the dataset
from google.colab import files
uploaded = files.upload()


#Pull up the proper attributes &  clean data
BTC=pd.read_csv('btc_2015_2024.csv')
BTC.head()

BTC.info()


#Any nulls, outliers, or dupilicates?
BTC.isnull().sum()


Clean as a whistle!!

BTC.describe()


BTC.head(3406)


#Line plot with date column on x axis formatted by year with open column on y axis
plt.plot(BTC['date'], BTC['open'])
plt.xlabel('Date')
plt.ylabel('Open Price')
plt.title('Date vs Open Price')
plt.show()



#Line plot with date column on x axis with close column on y axis
plt.plot(BTC['date'], BTC['close'])
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.title('Date vs Close Price')
plt.show()


VERY CLEAN DATA!! :) Now its time to play!

#Line plot residual errors to insure there is no trend patterns not captured by the model.
#Residuals show "leftovers" of whatever data that could not be explained. Density displays the distribution of the errors to pinpoint areas of improvement.

import statsmodels.formula.api as smf
model = smf.ols('close ~ open', data=BTC)
model_fit = model.fit()
residuals = pd.DataFrame(model_fit.resid)
fig, ax = plt.subplots(1,2, figsize=(15,3))
residuals.plot(kind='line', title="Residuals", ax=ax[0])
residuals.plot(kind='kde', title="Densities of Residual", ax=ax[1])
plt.show()


Residual Density is aorund "0" which suggest a good model fit.

residuals.describe()


Nothing to much to be afraid of, mean is close to 0 depicting roughly balanced data set with outliers and huge numbers according to the Max and Standard Deviation.

#Now the data is ready to dissect. First lets do some ARIMA modeling to show the moving average. This will help determine a "rolling average" to see the increase or decrease over a period of time and/or patterns.

from statsmodels.tsa.arima.model import ARIMA
model = ARIMA(BTC['open'], order=(5, 1, 0))
model_fit = model.fit()
print(model.fit().summary())


model = ARIMA(BTC['close'], order=(5, 1, 0))
model_fit = model.fit()
print(model.fit().summary())


model = ARIMA(BTC['low'], order=(5, 1, 0))
model_fit = model.fit()
print(model.fit().summary())


model = ARIMA(BTC['high'], order=(5, 1, 0))
model_fit = model.fit()
print(model.fit().summary())

model.fit.plot_diagnostics(figsize=(12,8))
plt.show()

#Time to train, test and fit! 1st split into training and testing data.
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
import numpy as np

train_size = int(len(BTC) * 0.8)
train, test = BTC[:train_size], BTC[train_size:]

# Fit the ARIMA model
p = 5
d = 0
q = 1

# Select only the 'close' column (or any other numeric column) for the model
model = ARIMA(train['close'], order=(p, d, q))  # Changed this line to only use 'close' column
model_fit = model.fit()

# Forecast
forecast = model.fit().forecast(steps=len(test))

# For plotting, we need to align the forecast with the test set's index
forecast_series = pd.Series(forecast, index=test.index)

plt.plot(test['close'], label='Actual')  # Changed this line to plot 'close' column
plt.plot(forecast_series, label='Forecast')  # Changed to use forecast_series
plt.legend()
plt.show()

# Calculate RMSE (RootMeanSquarError - evaluates models accuracy and how well a model fits the data by calculating the average of the predicted values and the actual values. )
rmse = np.sqrt(mean_squared_error(test['close'], forecast))  # Changed to use 'close' column
print(f"RMSE:{rmse}")




RMSE is like golf......closer to 0 the better! Well in this case we would not even want to look at a set of clubs. Higher RMSE means more mistakes that may be significant and fewer accurate forecasts. This can be visualized from the plot above also. Data definitely needs to be tightened a smudge OR are the outliers playing a factor? Eitehr way, we should get it corrected.

#Split into train and test sets
import numpy as np # Import numpy for the sqrt function
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

X = BTC['close'].values
size = int(len(X) * 0.66)
train, test = X[0:size], X[size:len(X)]
history = [x for x in train]
predictions = list()

# walk-forward validation (cross - validation technique to assess performance - )
for t in range(len(test)):
	model = ARIMA(history, order=(5,1,0))
	model_fit = model.fit()
	output = model_fit.forecast()
	yhat = output[0]
	predictions.append(yhat)
	obs = test[t]
	history.append(obs)
	print('predicted=%f, expected=%f' % (yhat, obs))

# evaluate forecasts
rmse = np.sqrt(mean_squared_error(test, predictions)) # Use np.sqrt instead of sqrt
print('Test RMSE: %.3f' % rmse)

# plot forecasts against actual outcomes
plt.plot(test)
plt.plot(predictions, color='red')
plt.title('BTC Close Price Prediction')
plt.xlabel('Time')
plt.ylabel('Close Price')
plt.show()


#Since the RMSE came out higher than 0, lets try using the Prophet forecasting method to further analyze.

!pip install prophet
from prophet import Prophet # Changed import statement to reflect the new library name
from prophet.plot import plot_plotly, plot_components_plotly # Updated import to reflect change
from sklearn.metrics import mean_squared_error

# Create a copy of the DataFrame to avoid modifying the original
BTC_prophet = BTC[['date', 'close']].copy()

# Rename the columns to 'ds' and 'y'
BTC_prophet.rename(columns={'date': 'ds', 'close': 'y'}, inplace=True)
m = Prophet()
m.fit(BTC_prophet)

# Use the renamed DataFrame
future = m.make_future_dataframe(periods=365)
forecast = m.predict(future)

#Using m.plot()
#For an interactive plot
fig2 = plot_plotly(m, forecast)

#Updated function name
#For interactive plot of the components
fig3 = plot_components_plotly(m, forecast)
future = m.make_future_dataframe(periods=12 * 5,
                                freq='M')
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower',
        'yhat_upper', 'trend',
        'trend_lower', 'trend_upper']].tail()
fig1 = m.plot(forecast, include_legend=True)


RMSE = np.sqrt(mean_squared_error(test, predictions))
print(f"RMSE:{RMSE}")



fig2 = m.plot_components(forecast)


In conlusion, with Bitcoin possessing price spikes over this period of time it can throw some data off or make it appear uncontrolled. Bitcoin shows the benefits of promising and phenomenal postitve gains. Some skeptics question its liqudity but the blockchain makes transactions secure, traceable and easy to confirm transactions. If the transaction can be confirmed, the funds can be realeased from any broker/ATM in the world.
